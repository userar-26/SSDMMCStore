#ifndef SSDMMCSTORE_KV_STORE_H
#define SSDMMCSTORE_KV_STORE_H

#include "common.h"

// Сохраняет значение по ключу.
// key        — указатель на ключ (например, строка или массив байт)
// key_len    — длина ключа в байтах
// value      — указатель на данные для сохранения
// value_len  — длина данных в байтах
// Возвращает 0 при успехе, отрицательное значение при ошибке.
int kvs_put(const void *key, size_t key_len, const void *value, size_t value_len);

// Получает значение по ключу.
// key        — указатель на ключ
// key_len    — длина ключа в байтах
// value      — указатель на буфер для данных
// value_len  — размер буфера на входе, на выходе — фактическая длина данных
// Возвращает 0 при успехе, отрицательное значение при ошибке (например, если ключ не найден).
int kvs_get(const void *key, size_t key_len, void *value, size_t *value_len);

// Удаляет значение по ключу.
// key        — указатель на ключ
// key_len    — длина ключа в байтах
// Возвращает 0 при успехе, отрицательное значение при ошибке (например, если ключ не найден).
int kvs_delete(const void *key, size_t key_len);

// Проверяет наличие ключа в хранилище.
// key        — указатель на ключ
// key_len    — длина ключа в байтах
// Возвращает 1, если ключ существует, 0 если не существует, отрицательное значение при ошибке.
bool kvs_exists(const void *key, size_t key_len);

// Инициализирует хранилище key-value.
// Возвращает 0 при успехе, отрицательное значение при ошибке.
int kvs_init(void);

// Освобождает ресурсы, связанные с хранилищем key-value.
void kvs_deinit(void);




#endif
