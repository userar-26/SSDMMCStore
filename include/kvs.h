#ifndef SSDMMCSTORE_KVS_H
#define SSDMMCSTORE_KVS_H

#include "common.h"

// Проверяет существование ключа в хранилище KVS.
// Возвращает 1, если ключ найден, 0 — если не найден, отрицательное значение — код ошибки.
// Коды ошибок:
//  -1 — устройство не инициализировано
//  -2 — некорректный указатель на ключ или длина ключа равна нулю
int kvs_exists(const void *key);

// Удаляет запись по ключу из хранилища KVS.
// Возвращает 0 при успешном удалении, иначе отрицательное значение.
// Возможные причины ошибки: устройство не инициализировано, некорректный ключ или его длина, ключ не найден, ошибки чтения/очистки данных, ошибки работы с памятью.
int kvs_delete(const void *key);

// Получает значение по ключу из хранилища KVS.
// value_len на входе содержит размер буфера value, на выходе — фактический размер значения.
// Возвращает 0 при успехе, иначе отрицательное значение.
// Возможные причины ошибки: устройство не инициализировано, некорректный ключ или его длина, ключ не найден, ошибки чтения/очистки данных, ошибки работы с памятью.
int kvs_get(const void *key, void *value, size_t *value_len);

// Сохраняет значение по ключу в хранилище KVS.
// Если ключ уже существует, старое значение удаляется.
// Возвращает 0 при успехе, иначе отрицательное значение.
// Возможные причины ошибки: устройство не инициализировано, некорректный ключ или его длина, превышение лимита ключей, ошибки выделения места, записи или работы с памятью.
int kvs_put(const void *key, size_t key_len, const void *value, size_t value_len);


// Универсальная инициализация: пытается загрузить существующее хранилище, если не удалось — создает новое.
// Возвращает 0 при успехе, отрицательное значение при ошибке.
int kvs_init(size_t storage_size_bytes);

// Деинициализация KVS: освобождает все ресурсы, связанные с устройством.
// После вызова этой функции глобальный указатель device становится NULL.
void kvs_deinit(void);


#endif
