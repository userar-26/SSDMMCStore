#ifndef SSDMMCSTORE_KV_STORE_H
#define SSDMMCSTORE_KV_STORE_H

#include "common.h"

/*
 * Инициализирует key-value хранилище.
 * filename Имя файла (или путь), где будут храниться данные.
 * size Размер хранилища в байтах.
 * return 0 при успехе, отрицательное значение при ошибке.
 */
int kvs_init(const char *filename, size_t size);

/*
 * Завершает работу key-value хранилища, освобождает все выделенные ресурсы.
 */
void kvs_deinit(void);

/*
 * Сохраняет значение по заданному ключу.
 *
 * Если ключ уже существует, его значение будет перезаписано новым.
 * Если ключа нет, будет создана новая запись.
 *
 * key Строка-ключ
 * value Указатель на данные для сохранения.
 * value_size Размер данных в байтах.
 * return 0 при успехе, отрицательное значение при ошибке (например, недостаточно места).
 */
int kvs_put(const char *key, const void *value, size_t value_size);

/*
 * Считывает значение, связанное с заданным ключом.
 *
 * key Строка-ключ
 * buffer Буфер для записи считанных данных.
 * buffer_size Размер буфера в байтах.
 * actual_size Указатель для возврата реального размера считанных данных.
 * return 0 при успехе, отрицательное значение при ошибке (например, ключ не найден или буфер слишком мал).
 */
int kvs_get(const char *key, void *buffer, size_t buffer_size, size_t *actual_size);

/*
 * Удаляет запись по заданному ключу.
 *
 * key Строка-ключ (null-terminated).
 * return 0 при успешном удалении, отрицательное значение при ошибке (например, ключ не найден).
 */
int kvs_delete(const char *key);

/*
 * Проверяет наличие записи с заданным ключом.
 *
 * key Строка-ключ (null-terminated).
 * return 1 если ключ существует, 0 если не существует, отрицательное значение при ошибке.
 */
bool kvs_exists(const char *key);

#endif
