#ifndef SSDMMCSTORE_KV_STORE_INTERNAL_H
#define SSDMMCSTORE_KV_STORE_INTERNAL_H


#include "kv_store.h"
#include "../ssdmmc_sim/ssdmmc_sim_internal.h"

typedef struct {
    uint32_t physical_size_bytes;      // Физический размер устройства в байтах (вся память, которую реально предоставляет контроллер)
    uint32_t logical_size_bytes;       // Размер хранилища, который хочет использовать пользователь (в байтах)
    uint32_t page_count;               // Количество страниц в устройстве (от контроллера)
    uint16_t page_size_bytes;          // размер страницы в байтах
    uint16_t words_per_page;           // Количество слов в одной странице (от контроллера)
    uint8_t  word_size_bytes;          // Размер одного слова в байтах (от контроллера)

    uint8_t  *bitmap;                  // Битовая карта занятости страниц
    size_t    bitmap_size_bytes;       // Размер битовой карты

    uint32_t *page_rewrite_count;      // Счётчики перезаписей страниц
    size_t    page_rewrite_count_size; // Размер массива
} SSDMMCDevice;

extern SSDMMCDevice * device;

#define KVS_STORAGE_FILENAME       "kvs_storage.bin"
#define KVS_METADATA_FILENAME      "kvs_metadata.bin"
#define KVS_LOG_FILENAME           "kvs_log.txt"
#define KVS_BITMAP_FILENAME        "kvs_bitmap.bin"
#define KVS_PAGE_STATS_FILENAME    "kvs_page_stats.bin"



// Создаёт файл хранилища заданного размера.
// Открывает или создаёт файл с указанным именем и увеличивает его размер до size_bytes байт.
// Если файл уже существует, он будет перезаписан.
// В случае успеха возвращает 0, при ошибке — отрицательное значение.
int kvs_create_storage_file(const char *filename, size_t size_bytes);

// Создаёт файл метаданных для хранилища.
// Открывает или создаёт файл с указанным именем для хранения служебной информации о хранилище.
// Если файл уже существует, он будет перезаписан.
// В случае успеха возвращает 0, при ошибке — отрицательное значение.
int kvs_create_metadata_file(const char *filename);

// Очищает файл данных хранилища.
// Файл с указанным именем либо заполняется нулями, либо его содержимое удаляется.
// Возвращает 0 при успехе, отрицательное значение при ошибке.
int kvs_clear_storage_file(const char *filename);

// Очищает файл метаданных хранилища.
// Файл с указанным именем либо заполняется нулями, либо его содержимое удаляется.
// Возвращает 0 при успехе, отрицательное значение при ошибке.
int kvs_clear_metadata_file(const char *filename);

// Записывает сообщение в лог-файл библиотеки KVS.
// Используется для вывода ошибок, предупреждений и важных событий,
// происходящих внутри библиотеки key-value storage (KVS).
// Сообщение добавляется в конец файла лога. Формат сообщения аналогичен printf.
// Если файл лога не удаётся открыть, функция ничего не делает.
//
// Пример использования:
//     kvs_log("Ошибка открытия файла: код %d", error_code);
//
// format - строка формата, как в printf
// ...    - дополнительные параметры для форматирования
void kvs_log(const char *format, ...);

// Инициализирует битовую карту занятости страниц.
// Если файл битовой карты существует, данные загружаются из файла.
// Если файл отсутствует, создаётся новая битовая карта и файл.
// Выделяет память под битовую карту и возвращает указатель на неё и её размер.
// Возвращает 0 при успехе, отрицательное значение при ошибке.
int kvs_bitmap_init(const char *filename, size_t page_count, uint8_t **bitmap, size_t *bitmap_size_bytes);


// Инициализирует массив статистики перезаписей (количество очисток) для страниц.
// Если файл статистики существует, данные загружаются из файла.
// Если файл отсутствует, создаётся новый массив и файл.
// Выделяет память под массив статистики и возвращает указатель на него и его размер.
// Возвращает 0 при успехе, отрицательное значение при ошибке.
int kvs_page_stats_init(const char *filename, size_t page_count, uint32_t **page_stats, size_t *page_stats_size);


// Сохраняет битовую карту занятости страниц в файл.
// Возвращает 0 при успехе, отрицательное значение при ошибке.
int kvs_bitmap_save(const char *filename, const uint8_t *bitmap, size_t bitmap_size_bytes);


// Сохраняет массив статистики перезаписей страниц в файл.
// Возвращает 0 при успехе, отрицательное значение при ошибке.
int kvs_page_stats_save(const char *filename, const uint32_t *page_stats, size_t page_stats_size);


// Очищает файл битовой карты хранилища.
// Файл с указанным именем либо заполняется нулями, либо его содержимое удаляется.
// Возвращает 0 при успехе, отрицательное значение при ошибке.
int kvs_clear_bitmap_file(const char *filename, size_t bitmap_size_bytes);


// Очищает файл статистики перезаписи страниц.
// Файл с указанным именем либо заполняется нулями, либо его содержимое удаляется.
// Возвращает 0 при успехе, отрицательное значение при ошибке.
int kvs_clear_page_stats_file(const char *filename, size_t page_count);






#endif
