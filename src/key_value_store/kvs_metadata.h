#ifndef SSDMMCSTORE_KVS_METADATA_H
#define SSDMMCSTORE_KVS_METADATA_H

#include "kvs_types.h"
#include "kvs_valid.h"

// Пересчитывает CRC для всех страниц, которые полностью или частично покрываются диапазоном [offset, offset + size).
// Для каждой такой страницы функция:
//   1. Считывает всю страницу из устройства во временный буфер.
//   2. Вычисляет CRC для содержимого страницы.
//   3. Записывает полученное значение CRC в массив CRC для этой страницы.
// offset — смещение в байтах относительно начала памяти устройства.
// size   — размер региона в байтах.
// Возвращает 0 при успехе, отрицательное значение при ошибке.
int crc_update_region(uint32_t offset, uint32_t size);

// Увеличивает на 1 значение счетчика перезаписей для всех страниц, которые полностью или частично покрываются диапазоном [offset, offset + size).
// offset — смещение в байтах относительно начала памяти устройства.
// size   — размер региона в байтах.
// Возвращает 0 при успехе, отрицательное значение при ошибке.
int rewrite_count_increment_region(uint32_t offset, uint32_t size);

// Помечает в битовой карте все слова, которые полностью или частично покрываются диапазоном [offset, offset + size), как занятые (устанавливает соответствующие биты в 1).
// offset — смещение в байтах относительно начала памяти устройства.
// size   — размер региона в байтах.
// Возвращает 0 при успехе, отрицательное значение при ошибке.
int bitmap_set_region(uint32_t offset, uint32_t size);

// Помечает в битовой карте все слова, которые полностью или частично покрываются диапазоном [offset, offset + size), как свободные (сбрасывает соответствующие биты в 0).
// offset — смещение в байтах относительно начала памяти устройства.
// size   — размер региона в байтах.
// Возвращает 0 при успехе, отрицательное значение при ошибке.
int bitmap_clear_region(uint32_t offset, uint32_t size);

// Выполняет сборку мусора на устройстве хранения SSDMMC-симулятора.
// Возвращает количество байт, которые были очищены в ходе сборки мусора.
uint32_t kvs_gc();

// Добавляет новую единицу метаданных в массив индекса ключей.
// new_metadata - указатель на структуру метаданных, которую требуется добавить
// Возвращает 0 при успехе, отрицательное значение при ошибке (например, если массив заполнен).
int kvs_add_metadata_entry(const kvs_metadata *new_metadata);

// Читает структуру CRC (служебные поля и массив CRC страниц) из файла.
// crc_info->page_crc должен быть выделен заранее.
// fp - указатель на открытый файл
// offset - смещение (в байтах) относительно начала файла, с которого начинается чтение
// crc_info - указатель на структуру CRC, куда будут считаны данные
// page_count - количество страниц (размер массива CRC)
// Возвращает 0 при успехе, отрицательное значение при ошибке.
int kvs_read_crc_info(FILE *fp, uint32_t offset, kvs_crc_info *crc_info, uint32_t page_count);

// Пересчитывает и обновляет CRC-коды для всех служебных (вспомогательных) областей хранилища.
// device - указатель на структуру устройства, содержащую все необходимые области и поля для CRC
// Функция вычисляет CRC для superblock, bitmap, metadata, и других служебных областей,
// и обновляет соответствующие поля в структуре CRC устройства.
// Возвращает 0 при успехе, отрицательное значение при ошибке.
int kvs_update_all_service_crc();

// Вычисляет значение crc для данных
// data - указатель на данные, для которого нужно вычислить crc
// size - размер этих данных
uint32_t crc32_calc(const void *data, size_t size);

// Пересоздает битовую карту устройства на основе валидных ключей и их value.
// Очищает весь пользовательский диапазон, затем отмечает метаданные и значения ключей занятыми страницами.
// Возвращает:
//   0  - успех
//  <0 - код ошибки
int kvs_bitmap_create();

// Ищет свободный регион для пользовательских данных заданной длины (в байтах).
// Возвращает смещение (offset) в памяти/файле, либо INT32_MAX, если свободного места нет.
uint32_t kvs_find_free_data_offset(uint32_t value_len);

// Ищет свободное смещение для размещения метаданных.
// Возвращает смещение (offset) в памяти/файле, либо INT32_MAX, если свободного места нет.
uint32_t kvs_find_free_metadata_offset(void);

// Вспомогательная функция для построения key_index по валидным метаданным.
// device - указатель на структуру устройства
// Возвращает 0 при успехе, отрицательное значение при ошибке.
int build_key_index();

// Сравнивает два элемента массива key_index.
// Используется для сортировки.
// Оба аргумента должны указывать на структуры kvs_key_index_entry.
int kvs_key_index_entry_cmp(const void *a, const void *b);


#endif //SSDMMCSTORE_KVS_METADATA_H
