#ifndef SSDMMCSTORE_KVS_METADATA_H
#define SSDMMCSTORE_KVS_METADATA_H

#include "kvs_types.h"
#include "kvs_valid.h"
#include "kvs_internal.h"

// Пересчитывает CRC для всех страниц, которые полностью или частично покрываются диапазоном [offset, offset + size).
// Для каждой такой страницы функция:
//   1. Считывает всю страницу из устройства во временный буфер.
//   2. Вычисляет CRC для содержимого страницы.
//   3. Записывает полученное значение CRC в массив CRC для этой страницы.
// offset — смещение в байтах относительно начала памяти устройства.
// size   — размер региона в байтах.
// Возвращает 0 при успехе, отрицательное значение при ошибке.
kvs_internal_status crc_update_region(uint32_t offset, uint32_t size);

// Увеличивает на 1 значение счетчика перезаписей для всех страниц, которые полностью или частично покрываются диапазоном [offset, offset + size).
// offset — смещение в байтах относительно начала памяти устройства.
// size   — размер региона в байтах.
// Возвращает 0 при успехе, отрицательное значение при ошибке.
kvs_internal_status rewrite_count_increment_region(uint32_t offset, uint32_t size);

// Помечает в битовой карте все слова, которые полностью или частично покрываются диапазоном [offset, offset + size), как занятые (устанавливает соответствующие биты в 1).
// offset — смещение в байтах относительно начала памяти устройства.
// size   — размер региона в байтах.
// Возвращает 0 при успехе, отрицательное значение при ошибке.
kvs_internal_status bitmap_set_region(uint32_t offset, uint32_t size);

// Помечает в битовой карте все слова, которые полностью или частично покрываются диапазоном [offset, offset + size), как свободные (сбрасывает соответствующие биты в 0).
// offset — смещение в байтах относительно начала памяти устройства.
// size   — размер региона в байтах.
// Возвращает 0 при успехе, отрицательное значение при ошибке.
kvs_internal_status bitmap_clear_region(uint32_t offset, uint32_t size);

// Выполняет сборку мусора на устройстве хранения SSDMMC-симулятора.
// Возвращает количество байт, которые были очищены в ходе сборки мусора.
uint32_t kvs_gc(void);

// Добавляет новую запись о ключе в key_index, который хранится в ОЗУ.
// Вызывается при загрузке хранилища для построения key_index по валидным метаданным.
// new_metadata - указатель на валидные метаданные, считанные с диска.
// pos          - физическое смещение этих метаданных на диске.
kvs_internal_status kvs_add_metadata_entry(const kvs_metadata *new_metadata, uint32_t pos);

// Вычисляет значение crc для данных
// data - указатель на данные, для которого нужно вычислить crc
// size - размер этих данных
uint32_t crc32_calc(const void *data, size_t size);

// Пересоздает битовую карту устройства на основе валидных ключей и их value.
// Очищает весь пользовательский диапазон, затем отмечает метаданные и значения ключей занятыми страницами.
// Возвращает:
//   0  - успех
//  <0 - код ошибки
kvs_internal_status kvs_bitmap_create(void);

// Ищет непрерывный свободный регион для пользовательских данных заданного размера.
// Реализует алгоритм карусель для выравнивания износа,
// начиная поиск с последнего выделенного места.
// value_len - требуемый размер данных в байтах.
// Возвращает смещение найденного региона или UINT32_MAX, если места нет.
uint32_t kvs_find_free_data_offset(uint32_t value_len);

// Ищет свободный слот для размещения метаданных.
// Реализует алгоритм карусель, начиная поиск со слота, следующего
// за последним выделенным, чтобы выравнивать износ области метаданных.
// Возвращает смещение найденного слота или UINT32_MAX, если места нет.
uint32_t kvs_find_free_metadata_offset(void);

// Вспомогательная функция для построения key_index по валидным метаданным.
// device - указатель на структуру устройства
// Возвращает 0 при успехе, отрицательное значение при ошибке.
kvs_internal_status build_key_index(void);

// Сравнивает два элемента массива key_index.
// Используется для сортировки.
// Оба аргумента должны указывать на структуры kvs_key_index_entry.
kvs_internal_status kvs_key_index_entry_cmp(const void *a, const void *b);

// Сохраняет все измененные в ОЗУ служебные структуры (bitmap, rewrite_count, crc_info) на диск.
// Вызывается в конце операций, изменяющих состояние хранилища
// Возвращает KVS_INTERNAL_OK при успехе или отрицательный код ошибки.
kvs_internal_status kvs_persist_all_service_data(void);

// Устанавливает бит в биткарте метаданных.
// slot_index - номер бита.
kvs_internal_status bitmap_set_metadata_slot(uint32_t slot_index);

// Сбрасывает бит в биткарте метаданных.
// slot_index - номер бита.
kvs_internal_status bitmap_clear_metadata_slot(uint32_t slot_index);

// Пересоздает биткарту метаданных, сканируя область метаданных на диске.
kvs_internal_status kvs_metadata_bitmap_create(void);

// Вычисляет и обновляет в ОЗУ CRC для одного конкретного слота метаданных.
// slot_index - порядковый номер слота метаданных для обновления.
kvs_internal_status kvs_update_single_metadata_crc(uint32_t slot_index);

// Возвращает бит указанной биткарты.
// bitmap - биткарта у которой нужно узнать значение бита
// bit    - номер бита, который нужно узнать
int get_bit(const uint8_t *bitmap, uint32_t bit);


#endif //SSDMMCSTORE_KVS_METADATA_H
