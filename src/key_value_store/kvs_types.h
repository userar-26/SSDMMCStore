#ifndef SSDMMCSTORE_KVS_TYPES_H
#define SSDMMCSTORE_KVS_TYPES_H

/****************************************************************************************
 *
 * Структура хранения данных в файле
 *
 * Файл хранилища имеет следующую последовательную структуру.
 *
 * +---------------------------------------------------------+---------------------------------------------------------+
 * | Область                                                 | Описание                                                |
 * |=========================================================|=========================================================|
 * | Superblock (Основной)                                   | Основной конфигурационный блок. Содержит все            |
 * | (KVS_SUPERBLOCK_SIZE)                                   | смещения, размеры и указатели "каруселей".              |
 * +---------------------------------------------------------+---------------------------------------------------------+
 * | Bitmap (для данных)                                     | Битовая карта для отслеживания свободных слов           |
 * | (device->superblock.bitmap_size_bytes)                  | в области пользовательских данных (userdata).           |
 * +---------------------------------------------------------+---------------------------------------------------------+
 * | Bitmap (для метаданных)                                 | Битовая карта для отслеживания свободных                |
 * | (device->superblock.metadata_bitmap_size_bytes)         | слотов в области метаданных (metadata).                 |
 * +---------------------------------------------------------+---------------------------------------------------------+
 * | Page Rewrite Counters                                   | Массив счетчиков перезаписи для страниц                 |
 * | (размер вычисляется)                                    | `userdata` и `metadata` для выравнивания износа.        |
 * +---------------------------------------------------------+---------------------------------------------------------+
 * | Область CRC                                             | Содержит CRC для всех служебных областей и              |
 * | (размер вычисляется)                                    | массивы CRC для данных и метаданных.                    |
 * +---------------------------------------------------------+---------------------------------------------------------+
 * | User Data Area                                          | Область для хранения пользовательских данных.           |
 * | (device->superblock.userdata_size_bytes)                | Её размер задается пользователем при инициализации.     |
 * +---------------------------------------------------------+---------------------------------------------------------+
 * | Metadata Area                                           | Область для хранения метаданных (ключ,                  |
 * | (размер вычисляется)                                    | смещение, размер значения).                             |
 * +---------------------------------------------------------+---------------------------------------------------------+
 * | Superblock (Резервный)                                  | Резервная копия основного суперблока. Хранится          |
 * | (KVS_SUPERBLOCK_SIZE)                                   | в самом конце файла для отказоустойчивости.             |
 * +---------------------------------------------------------+---------------------------------------------------------+
 *
 ****************************************************************************************/

#include "kvs.h"
#include "../ssdmmc_sim/ssdmmc_sim.h"

#define CLEAN_DATA     1
#define CLEAN_METADATA 2

#define KVS_MIN_NUM_METADATA      16
#define KVS_KEY_SIZE              128
#define KVS_SUPERBLOCK_SIZE       256
#define KVS_SUPERBLOCK_MAGIC      122221
#define KVS_LOG_FILENAME          "../kvs_log.txt"
#define KVS_STORAGE_FILENAME      "../data/kvs_storage.bin"

typedef struct {
    uint32_t superblock_crc;         // CRC для суперблока
    uint32_t superblock_backup_crc;  // CRC для резервного суперблока
    uint32_t bitmap_crc;             // CRC для битовой карты данных
    uint32_t rewrite_crc;            // CRC для области счетчиков перезаписи
    uint32_t metadata_bitmap_crc;    // CRC для биткарты метаданных

    uint32_t *page_crc;              // Массив CRC для каждой страницы пользовательских данных
    uint32_t *metadata_slot_crc;     // Массив CRC для каждого слота метаданных

} kvs_crc_info;

typedef struct {
    uint8_t  key[KVS_KEY_SIZE];      // Ключ
    uint32_t metadata_offset;        // Смещение метаданных для этого ключа
    uint8_t  flags;                  // Флаги (валидность, удаленность и т.д.)
} kvs_key_index_entry;


typedef struct {

    uint32_t magic;                  // Магическое число

    // Параметры устройства
    uint32_t storage_size_bytes;     // Физический размер устройства (байты)
    uint32_t userdata_size_bytes;    // Размер хранилища данных пользователя в байтах
    uint32_t global_page_count;      // Количество страниц всего хранилища
    uint16_t page_size_bytes;        // Размер страницы (байты)
    uint16_t words_per_page;         // Количество слов в странице
    uint8_t  word_size_bytes;        // Размер слова (байты)

    // Смещения служебных областей
    uint32_t bitmap_offset;          // Смещение битовой карты данных
    uint32_t page_rewrite_offset;    // Смещение массива очистки
    uint32_t page_crc_offset;        // Смещение массива CRC всех страниц
    uint32_t data_offset;            // Смещение пользовательских данных
    uint32_t metadata_offset;        // Смещение области метаданных
    uint32_t metadata_bitmap_offset; // Смещение биткарты для метаданных
    uint32_t superblock_backup_offset; // Смещение резервного суперблока

    // Размеры служебных областей
    uint32_t userdata_page_count;    // Количество страниц для данных пользователя
    uint16_t superblock_size_bytes;  // Размер суперблока в байтах
    uint16_t metadata_size_bytes;    // Размер области метаданных в байтах
    uint16_t bitmap_size_bytes;      // Размер битовой карты данных в байтах
    uint16_t metadata_bitmap_size_bytes; // Размер биткарты метаданных в байтах

    uint32_t max_key_count;          // Максимально возможное количество ключей

    uint32_t last_data_word_checked; // Последнее проверенное слово в userdata при поиске места
    uint32_t last_metadata_slot_checked; // Последний проверенный слот в metadata при поиске места

} kvs_superblock;

typedef struct {

    FILE *fp;                        // Указатель на файл-эмулятор

    kvs_superblock superblock;       // Суперблок нашего файла-эмулятора
    kvs_crc_info   page_crc;         // Структура для хранения crc-кодов, различных частей хранилища

    // Указатели на служебные области
    uint8_t  *bitmap;                // Битовая карта занятости слов в области данных
    uint8_t  *metadata_bitmap;       // Битовая карта занятости слотов в области метаданных
    uint32_t *page_rewrite_count;    // Счетчики перезаписей страниц
    kvs_key_index_entry *key_index;  // Массив записей ключей: для каждого ключа хранится его имя и смещение метаданных.

    uint32_t key_count;              // Текущее количество ключей

} kvs_device;


typedef struct {

    uint8_t  key[KVS_KEY_SIZE];      // Ключ (строка или бинарные данные)
    uint32_t value_offset;           // Смещение значения в файле
    uint32_t value_size;             // Размер значения в байтах

} kvs_metadata;

extern kvs_device * device;

#endif //SSDMMCSTORE_KVS_TYPES_H